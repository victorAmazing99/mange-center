{
  "version": 3,
  "sources": ["../../node_modules/jsbn/index.js", "../../node_modules/sm-crypto/src/sm2/asn1.js", "../../node_modules/sm-crypto/src/sm2/ec.js", "../../node_modules/sm-crypto/src/sm2/utils.js", "../../node_modules/sm-crypto/src/sm2/sm3.js", "../../node_modules/sm-crypto/src/sm2/index.js", "../../node_modules/sm-crypto/src/sm3/index.js", "../../node_modules/sm-crypto/src/sm4/index.js", "../../node_modules/sm-crypto/src/index.js", "dep:sm-crypto"],
  "sourcesContent": ["(function(){\n\n    // Copyright (c) 2005  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Basic JavaScript BN library - subset useful for RSA encryption.\n\n    // Bits per digit\n    var dbits;\n\n    // JavaScript engine analysis\n    var canary = 0xdeadbeefcafe;\n    var j_lm = ((canary&0xffffff)==0xefcafe);\n\n    // (public) Constructor\n    function BigInteger(a,b,c) {\n      if(a != null)\n        if(\"number\" == typeof a) this.fromNumber(a,b,c);\n        else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n        else this.fromString(a,b);\n    }\n\n    // return new, unset BigInteger\n    function nbi() { return new BigInteger(null); }\n\n    // am: Compute w_j += (x*this_i), propagate carries,\n    // c is initial carry, returns final carry.\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n    // We need to select the fastest one that works in this environment.\n\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    function am1(i,x,w,j,c,n) {\n      while(--n >= 0) {\n        var v = x*this[i++]+w[j]+c;\n        c = Math.floor(v/0x4000000);\n        w[j++] = v&0x3ffffff;\n      }\n      return c;\n    }\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    function am2(i,x,w,j,c,n) {\n      var xl = x&0x7fff, xh = x>>15;\n      while(--n >= 0) {\n        var l = this[i]&0x7fff;\n        var h = this[i++]>>15;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n        w[j++] = l&0x3fffffff;\n      }\n      return c;\n    }\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    function am3(i,x,w,j,c,n) {\n      var xl = x&0x3fff, xh = x>>14;\n      while(--n >= 0) {\n        var l = this[i]&0x3fff;\n        var h = this[i++]>>14;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n        c = (l>>28)+(m>>14)+xh*h;\n        w[j++] = l&0xfffffff;\n      }\n      return c;\n    }\n    var inBrowser = typeof navigator !== \"undefined\";\n    if(inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n      BigInteger.prototype.am = am2;\n      dbits = 30;\n    }\n    else if(inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n      BigInteger.prototype.am = am1;\n      dbits = 26;\n    }\n    else { // Mozilla/Netscape seems to prefer am3\n      BigInteger.prototype.am = am3;\n      dbits = 28;\n    }\n\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = ((1<<dbits)-1);\n    BigInteger.prototype.DV = (1<<dbits);\n\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2,BI_FP);\n    BigInteger.prototype.F1 = BI_FP-dbits;\n    BigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n    // Digit conversions\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr,vv;\n    rr = \"0\".charCodeAt(0);\n    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n    function int2char(n) { return BI_RM.charAt(n); }\n    function intAt(s,i) {\n      var c = BI_RC[s.charCodeAt(i)];\n      return (c==null)?-1:c;\n    }\n\n    // (protected) copy this to r\n    function bnpCopyTo(r) {\n      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n      r.t = this.t;\n      r.s = this.s;\n    }\n\n    // (protected) set from integer value x, -DV <= x < DV\n    function bnpFromInt(x) {\n      this.t = 1;\n      this.s = (x<0)?-1:0;\n      if(x > 0) this[0] = x;\n      else if(x < -1) this[0] = x+this.DV;\n      else this.t = 0;\n    }\n\n    // return bigint initialized to value\n    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n    // (protected) set from string and radix\n    function bnpFromString(s,b) {\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 256) k = 8; // byte array\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else { this.fromRadix(s,b); return; }\n      this.t = 0;\n      this.s = 0;\n      var i = s.length, mi = false, sh = 0;\n      while(--i >= 0) {\n        var x = (k==8)?s[i]&0xff:intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\") mi = true;\n          continue;\n        }\n        mi = false;\n        if(sh == 0)\n          this[this.t++] = x;\n        else if(sh+k > this.DB) {\n          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n          this[this.t++] = (x>>(this.DB-sh));\n        }\n        else\n          this[this.t-1] |= x<<sh;\n        sh += k;\n        if(sh >= this.DB) sh -= this.DB;\n      }\n      if(k == 8 && (s[0]&0x80) != 0) {\n        this.s = -1;\n        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n      }\n      this.clamp();\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) clamp off excess high words\n    function bnpClamp() {\n      var c = this.s&this.DM;\n      while(this.t > 0 && this[this.t-1] == c) --this.t;\n    }\n\n    // (public) return string representation in given radix\n    function bnToString(b) {\n      if(this.s < 0) return \"-\"+this.negate().toString(b);\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else return this.toRadix(b);\n      var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n      var p = this.DB-(i*this.DB)%k;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n        while(i >= 0) {\n          if(p < k) {\n            d = (this[i]&((1<<p)-1))<<(k-p);\n            d |= this[--i]>>(p+=this.DB-k);\n          }\n          else {\n            d = (this[i]>>(p-=k))&km;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if(d > 0) m = true;\n          if(m) r += int2char(d);\n        }\n      }\n      return m?r:\"0\";\n    }\n\n    // (public) -this\n    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n    // (public) |this|\n    function bnAbs() { return (this.s<0)?this.negate():this; }\n\n    // (public) return + if this > a, - if this < a, 0 if equal\n    function bnCompareTo(a) {\n      var r = this.s-a.s;\n      if(r != 0) return r;\n      var i = this.t;\n      r = i-a.t;\n      if(r != 0) return (this.s<0)?-r:r;\n      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n      return 0;\n    }\n\n    // returns bit length of the integer x\n    function nbits(x) {\n      var r = 1, t;\n      if((t=x>>>16) != 0) { x = t; r += 16; }\n      if((t=x>>8) != 0) { x = t; r += 8; }\n      if((t=x>>4) != 0) { x = t; r += 4; }\n      if((t=x>>2) != 0) { x = t; r += 2; }\n      if((t=x>>1) != 0) { x = t; r += 1; }\n      return r;\n    }\n\n    // (public) return the number of bits in \"this\"\n    function bnBitLength() {\n      if(this.t <= 0) return 0;\n      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n    }\n\n    // (protected) r = this << n*DB\n    function bnpDLShiftTo(n,r) {\n      var i;\n      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n      for(i = n-1; i >= 0; --i) r[i] = 0;\n      r.t = this.t+n;\n      r.s = this.s;\n    }\n\n    // (protected) r = this >> n*DB\n    function bnpDRShiftTo(n,r) {\n      for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n      r.t = Math.max(this.t-n,0);\n      r.s = this.s;\n    }\n\n    // (protected) r = this << n\n    function bnpLShiftTo(n,r) {\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<cbs)-1;\n      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n      for(i = this.t-1; i >= 0; --i) {\n        r[i+ds+1] = (this[i]>>cbs)|c;\n        c = (this[i]&bm)<<bs;\n      }\n      for(i = ds-1; i >= 0; --i) r[i] = 0;\n      r[ds] = c;\n      r.t = this.t+ds+1;\n      r.s = this.s;\n      r.clamp();\n    }\n\n    // (protected) r = this >> n\n    function bnpRShiftTo(n,r) {\n      r.s = this.s;\n      var ds = Math.floor(n/this.DB);\n      if(ds >= this.t) { r.t = 0; return; }\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<bs)-1;\n      r[0] = this[ds]>>bs;\n      for(var i = ds+1; i < this.t; ++i) {\n        r[i-ds-1] |= (this[i]&bm)<<cbs;\n        r[i-ds] = this[i]>>bs;\n      }\n      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n      r.t = this.t-ds;\n      r.clamp();\n    }\n\n    // (protected) r = this - a\n    function bnpSubTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]-a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c -= a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c -= a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c -= a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c < -1) r[i++] = this.DV+c;\n      else if(c > 0) r[i++] = c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyTo(a,r) {\n      var x = this.abs(), y = a.abs();\n      var i = x.t;\n      r.t = i+y.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n      r.s = 0;\n      r.clamp();\n      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (protected) r = this^2, r != this (HAC 14.16)\n    function bnpSquareTo(r) {\n      var x = this.abs();\n      var i = r.t = 2*x.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < x.t-1; ++i) {\n        var c = x.am(i,x[i],r,2*i,0,1);\n        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n          r[i+x.t] -= x.DV;\n          r[i+x.t+1] = 1;\n        }\n      }\n      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n      r.s = 0;\n      r.clamp();\n    }\n\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    function bnpDivRemTo(m,q,r) {\n      var pm = m.abs();\n      if(pm.t <= 0) return;\n      var pt = this.abs();\n      if(pt.t < pm.t) {\n        if(q != null) q.fromInt(0);\n        if(r != null) this.copyTo(r);\n        return;\n      }\n      if(r == null) r = nbi();\n      var y = nbi(), ts = this.s, ms = m.s;\n      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus\n      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n      else { pm.copyTo(y); pt.copyTo(r); }\n      var ys = y.t;\n      var y0 = y[ys-1];\n      if(y0 == 0) return;\n      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n      var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n      y.dlShiftTo(j,t);\n      if(r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t,r);\n      }\n      BigInteger.ONE.dlShiftTo(ys,t);\n      t.subTo(y,y);  // \"negative\" y so we can replace sub with am later\n      while(y.t < ys) y[y.t++] = 0;\n      while(--j >= 0) {\n        // Estimate quotient digit\n        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out\n          y.dlShiftTo(j,t);\n          r.subTo(t,r);\n          while(r[i] < --qd) r.subTo(t,r);\n        }\n      }\n      if(q != null) {\n        r.drShiftTo(ys,q);\n        if(ts != ms) BigInteger.ZERO.subTo(q,q);\n      }\n      r.t = ys;\n      r.clamp();\n      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder\n      if(ts < 0) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (public) this mod a\n    function bnMod(a) {\n      var r = nbi();\n      this.abs().divRemTo(a,null,r);\n      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n      return r;\n    }\n\n    // Modular reduction using \"classic\" algorithm\n    function Classic(m) { this.m = m; }\n    function cConvert(x) {\n      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n      else return x;\n    }\n    function cRevert(x) { return x; }\n    function cReduce(x) { x.divRemTo(this.m,null,x); }\n    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    function bnpInvDigit() {\n      if(this.t < 1) return 0;\n      var x = this[0];\n      if((x&1) == 0) return 0;\n      var y = x&3;       // y == 1/x mod 2^2\n      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4\n      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8\n      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16\n      // last step - calculate inverse mod DV directly;\n      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits\n      // we really want the negative inverse, and -DV < y < DV\n      return (y>0)?this.DV-y:-y;\n    }\n\n    // Montgomery reduction\n    function Montgomery(m) {\n      this.m = m;\n      this.mp = m.invDigit();\n      this.mpl = this.mp&0x7fff;\n      this.mph = this.mp>>15;\n      this.um = (1<<(m.DB-15))-1;\n      this.mt2 = 2*m.t;\n    }\n\n    // xR mod m\n    function montConvert(x) {\n      var r = nbi();\n      x.abs().dlShiftTo(this.m.t,r);\n      r.divRemTo(this.m,null,r);\n      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n      return r;\n    }\n\n    // x/R mod m\n    function montRevert(x) {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n\n    // x = x/R mod m (HAC 14.32)\n    function montReduce(x) {\n      while(x.t <= this.mt2) // pad x so am has enough room later\n        x[x.t++] = 0;\n      for(var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i]&0x7fff;\n        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i+this.m.t;\n        x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n        // propagate carry\n        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n      }\n      x.clamp();\n      x.drShiftTo(this.m.t,x);\n      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = \"x^2/R mod m\"; x != r\n    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = \"xy/R mod m\"; x,y != r\n    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n\n    // (protected) true iff this is even\n    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    function bnpExp(e,z) {\n      if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n      g.copyTo(r);\n      while(--i >= 0) {\n        z.sqrTo(r,r2);\n        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n        else { var t = r; r = r2; r2 = t; }\n      }\n      return z.revert(r);\n    }\n\n    // (public) this^e % m, 0 <= e < 2^32\n    function bnModPowInt(e,m) {\n      var z;\n      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n      return this.exp(e,z);\n    }\n\n    // protected\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n\n    // public\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n\n    // \"constants\"\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n\n    // Copyright (c) 2005-2009  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Extended JavaScript BN functions, required for RSA private ops.\n\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n    // Version 1.2: square() API, isProbablePrime fix\n\n    // (public)\n    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n    // (public) return value as integer\n    function bnIntValue() {\n      if(this.s < 0) {\n        if(this.t == 1) return this[0]-this.DV;\n        else if(this.t == 0) return -1;\n      }\n      else if(this.t == 1) return this[0];\n      else if(this.t == 0) return 0;\n      // assumes 16 < DB < 32\n      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n    }\n\n    // (public) return value as byte\n    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n    // (public) return value as short (assumes DB>=16)\n    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n    // (protected) return x s.t. r^x < DV\n    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n    // (public) 0 if this == 0, 1 if this > 0\n    function bnSigNum() {\n      if(this.s < 0) return -1;\n      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n      else return 1;\n    }\n\n    // (protected) convert to radix string\n    function bnpToRadix(b) {\n      if(b == null) b = 10;\n      if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n      var cs = this.chunkSize(b);\n      var a = Math.pow(b,cs);\n      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n      this.divRemTo(d,y,z);\n      while(y.signum() > 0) {\n        r = (a+z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d,y,z);\n      }\n      return z.intValue().toString(b) + r;\n    }\n\n    // (protected) convert from radix string\n    function bnpFromRadix(s,b) {\n      this.fromInt(0);\n      if(b == null) b = 10;\n      var cs = this.chunkSize(b);\n      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n      for(var i = 0; i < s.length; ++i) {\n        var x = intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n          continue;\n        }\n        w = b*w+x;\n        if(++j >= cs) {\n          this.dMultiply(d);\n          this.dAddOffset(w,0);\n          j = 0;\n          w = 0;\n        }\n      }\n      if(j > 0) {\n        this.dMultiply(Math.pow(b,j));\n        this.dAddOffset(w,0);\n      }\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) alternate constructor\n    function bnpFromNumber(a,b,c) {\n      if(\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if(a < 2) this.fromInt(1);\n        else {\n          this.fromNumber(a,c);\n          if(!this.testBit(a-1))    // force MSB set\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n          if(this.isEven()) this.dAddOffset(1,0); // force odd\n          while(!this.isProbablePrime(b)) {\n            this.dAddOffset(2,0);\n            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n          }\n        }\n      }\n      else {\n        // new BigInteger(int,RNG)\n        var x = new Array(), t = a&7;\n        x.length = (a>>3)+1;\n        b.nextBytes(x);\n        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n        this.fromString(x,256);\n      }\n    }\n\n    // (public) convert to bigendian byte array\n    function bnToByteArray() {\n      var i = this.t, r = new Array();\n      r[0] = this.s;\n      var p = this.DB-(i*this.DB)%8, d, k = 0;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n          r[k++] = d|(this.s<<(this.DB-p));\n        while(i >= 0) {\n          if(p < 8) {\n            d = (this[i]&((1<<p)-1))<<(8-p);\n            d |= this[--i]>>(p+=this.DB-8);\n          }\n          else {\n            d = (this[i]>>(p-=8))&0xff;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if((d&0x80) != 0) d |= -256;\n          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n          if(k > 0 || d != this.s) r[k++] = d;\n        }\n      }\n      return r;\n    }\n\n    function bnEquals(a) { return(this.compareTo(a)==0); }\n    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }\n    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n    // (protected) r = this op a (bitwise)\n    function bnpBitwiseTo(a,op,r) {\n      var i, f, m = Math.min(a.t,this.t);\n      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n      if(a.t < this.t) {\n        f = a.s&this.DM;\n        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n        r.t = this.t;\n      }\n      else {\n        f = this.s&this.DM;\n        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n        r.t = a.t;\n      }\n      r.s = op(this.s,a.s);\n      r.clamp();\n    }\n\n    // (public) this & a\n    function op_and(x,y) { return x&y; }\n    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n    // (public) this | a\n    function op_or(x,y) { return x|y; }\n    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n    // (public) this ^ a\n    function op_xor(x,y) { return x^y; }\n    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n    // (public) this & ~a\n    function op_andnot(x,y) { return x&~y; }\n    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n    // (public) ~this\n    function bnNot() {\n      var r = nbi();\n      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n      r.t = this.t;\n      r.s = ~this.s;\n      return r;\n    }\n\n    // (public) this << n\n    function bnShiftLeft(n) {\n      var r = nbi();\n      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n      return r;\n    }\n\n    // (public) this >> n\n    function bnShiftRight(n) {\n      var r = nbi();\n      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n      return r;\n    }\n\n    // return index of lowest 1-bit in x, x < 2^31\n    function lbit(x) {\n      if(x == 0) return -1;\n      var r = 0;\n      if((x&0xffff) == 0) { x >>= 16; r += 16; }\n      if((x&0xff) == 0) { x >>= 8; r += 8; }\n      if((x&0xf) == 0) { x >>= 4; r += 4; }\n      if((x&3) == 0) { x >>= 2; r += 2; }\n      if((x&1) == 0) ++r;\n      return r;\n    }\n\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    function bnGetLowestSetBit() {\n      for(var i = 0; i < this.t; ++i)\n        if(this[i] != 0) return i*this.DB+lbit(this[i]);\n      if(this.s < 0) return this.t*this.DB;\n      return -1;\n    }\n\n    // return number of 1 bits in x\n    function cbit(x) {\n      var r = 0;\n      while(x != 0) { x &= x-1; ++r; }\n      return r;\n    }\n\n    // (public) return number of set bits\n    function bnBitCount() {\n      var r = 0, x = this.s&this.DM;\n      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n      return r;\n    }\n\n    // (public) true iff nth bit is set\n    function bnTestBit(n) {\n      var j = Math.floor(n/this.DB);\n      if(j >= this.t) return(this.s!=0);\n      return((this[j]&(1<<(n%this.DB)))!=0);\n    }\n\n    // (protected) this op (1<<n)\n    function bnpChangeBit(n,op) {\n      var r = BigInteger.ONE.shiftLeft(n);\n      this.bitwiseTo(r,op,r);\n      return r;\n    }\n\n    // (public) this | (1<<n)\n    function bnSetBit(n) { return this.changeBit(n,op_or); }\n\n    // (public) this & ~(1<<n)\n    function bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n    // (public) this ^ (1<<n)\n    function bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n    // (protected) r = this + a\n    function bnpAddTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]+a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c += a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c += a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c > 0) r[i++] = c;\n      else if(c < -1) r[i++] = this.DV+c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (public) this + a\n    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n    // (public) this - a\n    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n    // (public) this * a\n    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n    // (public) this^2\n    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n    // (public) this / a\n    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n    // (public) this % a\n    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n    // (public) [this/a,this%a]\n    function bnDivideAndRemainder(a) {\n      var q = nbi(), r = nbi();\n      this.divRemTo(a,q,r);\n      return new Array(q,r);\n    }\n\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    function bnpDMultiply(n) {\n      this[this.t] = this.am(0,n-1,this,0,0,this.t);\n      ++this.t;\n      this.clamp();\n    }\n\n    // (protected) this += n << w words, this >= 0\n    function bnpDAddOffset(n,w) {\n      if(n == 0) return;\n      while(this.t <= w) this[this.t++] = 0;\n      this[w] += n;\n      while(this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if(++w >= this.t) this[this.t++] = 0;\n        ++this[w];\n      }\n    }\n\n    // A \"null\" reducer\n    function NullExp() {}\n    function nNop(x) { return x; }\n    function nMulTo(x,y,r) { x.multiplyTo(y,r); }\n    function nSqrTo(x,r) { x.squareTo(r); }\n\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n\n    // (public) this^e\n    function bnPow(e) { return this.exp(e,new NullExp()); }\n\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyLowerTo(a,n,r) {\n      var i = Math.min(this.t+a.t,n);\n      r.s = 0; // assumes a,this >= 0\n      r.t = i;\n      while(i > 0) r[--i] = 0;\n      var j;\n      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n      r.clamp();\n    }\n\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyUpperTo(a,n,r) {\n      --n;\n      var i = r.t = this.t+a.t-n;\n      r.s = 0; // assumes a,this >= 0\n      while(--i >= 0) r[i] = 0;\n      for(i = Math.max(n-this.t,0); i < a.t; ++i)\n        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n      r.clamp();\n      r.drShiftTo(1,r);\n    }\n\n    // Barrett modular reduction\n    function Barrett(m) {\n      // setup Barrett\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n      this.mu = this.r2.divide(m);\n      this.m = m;\n    }\n\n    function barrettConvert(x) {\n      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n      else if(x.compareTo(this.m) < 0) return x;\n      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n    }\n\n    function barrettRevert(x) { return x; }\n\n    // x = x mod m (HAC 14.42)\n    function barrettReduce(x) {\n      x.drShiftTo(this.m.t-1,this.r2);\n      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n      x.subTo(this.r2,x);\n      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = x^2 mod m; x != r\n    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = x*y mod m; x,y != r\n    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n\n    // (public) this^e % m (HAC 14.85)\n    function bnModPow(e,m) {\n      var i = e.bitLength(), k, r = nbv(1), z;\n      if(i <= 0) return r;\n      else if(i < 18) k = 1;\n      else if(i < 48) k = 3;\n      else if(i < 144) k = 4;\n      else if(i < 768) k = 5;\n      else k = 6;\n      if(i < 8)\n        z = new Classic(m);\n      else if(m.isEven())\n        z = new Barrett(m);\n      else\n        z = new Montgomery(m);\n\n      // precomputation\n      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n      g[1] = z.convert(this);\n      if(k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1],g2);\n        while(n <= km) {\n          g[n] = nbi();\n          z.mulTo(g2,g[n-2],g[n]);\n          n += 2;\n        }\n      }\n\n      var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n      i = nbits(e[j])-1;\n      while(j >= 0) {\n        if(i >= k1) w = (e[j]>>(i-k1))&km;\n        else {\n          w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n        }\n\n        n = k;\n        while((w&1) == 0) { w >>= 1; --n; }\n        if((i -= n) < 0) { i += this.DB; --j; }\n        if(is1) {    // ret == 1, don't bother squaring or multiplying it\n          g[w].copyTo(r);\n          is1 = false;\n        }\n        else {\n          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n          z.mulTo(r2,g[w],r);\n        }\n\n        while(j >= 0 && (e[j]&(1<<i)) == 0) {\n          z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n          if(--i < 0) { i = this.DB-1; --j; }\n        }\n      }\n      return z.revert(r);\n    }\n\n    // (public) gcd(this,a) (HAC 14.54)\n    function bnGCD(a) {\n      var x = (this.s<0)?this.negate():this.clone();\n      var y = (a.s<0)?a.negate():a.clone();\n      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n      if(g < 0) return x;\n      if(i < g) g = i;\n      if(g > 0) {\n        x.rShiftTo(g,x);\n        y.rShiftTo(g,y);\n      }\n      while(x.signum() > 0) {\n        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n        if(x.compareTo(y) >= 0) {\n          x.subTo(y,x);\n          x.rShiftTo(1,x);\n        }\n        else {\n          y.subTo(x,y);\n          y.rShiftTo(1,y);\n        }\n      }\n      if(g > 0) y.lShiftTo(g,y);\n      return y;\n    }\n\n    // (protected) this % n, n < 2^26\n    function bnpModInt(n) {\n      if(n <= 0) return 0;\n      var d = this.DV%n, r = (this.s<0)?n-1:0;\n      if(this.t > 0)\n        if(d == 0) r = this[0]%n;\n        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n      return r;\n    }\n\n    // (public) 1/this % m (HAC 14.61)\n    function bnModInverse(m) {\n      var ac = m.isEven();\n      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n      var u = m.clone(), v = this.clone();\n      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n      while(u.signum() != 0) {\n        while(u.isEven()) {\n          u.rShiftTo(1,u);\n          if(ac) {\n            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n            a.rShiftTo(1,a);\n          }\n          else if(!b.isEven()) b.subTo(m,b);\n          b.rShiftTo(1,b);\n        }\n        while(v.isEven()) {\n          v.rShiftTo(1,v);\n          if(ac) {\n            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n            c.rShiftTo(1,c);\n          }\n          else if(!d.isEven()) d.subTo(m,d);\n          d.rShiftTo(1,d);\n        }\n        if(u.compareTo(v) >= 0) {\n          u.subTo(v,u);\n          if(ac) a.subTo(c,a);\n          b.subTo(d,b);\n        }\n        else {\n          v.subTo(u,v);\n          if(ac) c.subTo(a,c);\n          d.subTo(b,d);\n        }\n      }\n      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n      if(d.compareTo(m) >= 0) return d.subtract(m);\n      if(d.signum() < 0) d.addTo(m,d); else return d;\n      if(d.signum() < 0) return d.add(m); else return d;\n    }\n\n    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n    var lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n    // (public) test primality with certainty >= 1-.5^t\n    function bnIsProbablePrime(t) {\n      var i, x = this.abs();\n      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n        for(i = 0; i < lowprimes.length; ++i)\n          if(x[0] == lowprimes[i]) return true;\n        return false;\n      }\n      if(x.isEven()) return false;\n      i = 1;\n      while(i < lowprimes.length) {\n        var m = lowprimes[i], j = i+1;\n        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n        m = x.modInt(m);\n        while(i < j) if(m%lowprimes[i++] == 0) return false;\n      }\n      return x.millerRabin(t);\n    }\n\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    function bnpMillerRabin(t) {\n      var n1 = this.subtract(BigInteger.ONE);\n      var k = n1.getLowestSetBit();\n      if(k <= 0) return false;\n      var r = n1.shiftRight(k);\n      t = (t+1)>>1;\n      if(t > lowprimes.length) t = lowprimes.length;\n      var a = nbi();\n      for(var i = 0; i < t; ++i) {\n        //Pick bases at random, instead of starting at 2\n        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n        var y = a.modPow(r,this);\n        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n          var j = 1;\n          while(j++ < k && y.compareTo(n1) != 0) {\n            y = y.modPowInt(2,this);\n            if(y.compareTo(BigInteger.ONE) == 0) return false;\n          }\n          if(y.compareTo(n1) != 0) return false;\n        }\n      }\n      return true;\n    }\n\n    // protected\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n\n    // public\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n    // JSBN-specific extension\n    BigInteger.prototype.square = bnSquare;\n\n    // Expose the Barrett function\n    BigInteger.prototype.Barrett = Barrett\n\n    // BigInteger interfaces not implemented in jsbn:\n\n    // BigInteger(int signum, byte[] magnitude)\n    // double doubleValue()\n    // float floatValue()\n    // int hashCode()\n    // long longValue()\n    // static BigInteger valueOf(long val)\n\n    // Random number generator - requires a PRNG backend, e.g. prng4.js\n\n    // For best results, put code like\n    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n    // in your main HTML document.\n\n    var rng_state;\n    var rng_pool;\n    var rng_pptr;\n\n    // Mix in a 32-bit integer into the pool\n    function rng_seed_int(x) {\n      rng_pool[rng_pptr++] ^= x & 255;\n      rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n      rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n      rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n    }\n\n    // Mix in the current time (w/milliseconds) into the pool\n    function rng_seed_time() {\n      rng_seed_int(new Date().getTime());\n    }\n\n    // Initialize the pool with junk if needed.\n    if(rng_pool == null) {\n      rng_pool = new Array();\n      rng_pptr = 0;\n      var t;\n      if(typeof window !== \"undefined\" && window.crypto) {\n        if (window.crypto.getRandomValues) {\n          // Use webcrypto if available\n          var ua = new Uint8Array(32);\n          window.crypto.getRandomValues(ua);\n          for(t = 0; t < 32; ++t)\n            rng_pool[rng_pptr++] = ua[t];\n        }\n        else if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n          // Extract entropy (256 bits) from NS4 RNG if available\n          var z = window.crypto.random(32);\n          for(t = 0; t < z.length; ++t)\n            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n        }\n      }\n      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n        t = Math.floor(65536 * Math.random());\n        rng_pool[rng_pptr++] = t >>> 8;\n        rng_pool[rng_pptr++] = t & 255;\n      }\n      rng_pptr = 0;\n      rng_seed_time();\n      //rng_seed_int(window.screenX);\n      //rng_seed_int(window.screenY);\n    }\n\n    function rng_get_byte() {\n      if(rng_state == null) {\n        rng_seed_time();\n        rng_state = prng_newstate();\n        rng_state.init(rng_pool);\n        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n          rng_pool[rng_pptr] = 0;\n        rng_pptr = 0;\n        //rng_pool = null;\n      }\n      // TODO: allow reseeding after first request\n      return rng_state.next();\n    }\n\n    function rng_get_bytes(ba) {\n      var i;\n      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n    }\n\n    function SecureRandom() {}\n\n    SecureRandom.prototype.nextBytes = rng_get_bytes;\n\n    // prng4.js - uses Arcfour as a PRNG\n\n    function Arcfour() {\n      this.i = 0;\n      this.j = 0;\n      this.S = new Array();\n    }\n\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\n    function ARC4init(key) {\n      var i, j, t;\n      for(i = 0; i < 256; ++i)\n        this.S[i] = i;\n      j = 0;\n      for(i = 0; i < 256; ++i) {\n        j = (j + this.S[i] + key[i % key.length]) & 255;\n        t = this.S[i];\n        this.S[i] = this.S[j];\n        this.S[j] = t;\n      }\n      this.i = 0;\n      this.j = 0;\n    }\n\n    function ARC4next() {\n      var t;\n      this.i = (this.i + 1) & 255;\n      this.j = (this.j + this.S[this.i]) & 255;\n      t = this.S[this.i];\n      this.S[this.i] = this.S[this.j];\n      this.S[this.j] = t;\n      return this.S[(t + this.S[this.i]) & 255];\n    }\n\n    Arcfour.prototype.init = ARC4init;\n    Arcfour.prototype.next = ARC4next;\n\n    // Plug in your RNG constructor here\n    function prng_newstate() {\n      return new Arcfour();\n    }\n\n    // Pool size must be a multiple of 4 and greater than 32.\n    // An array of bytes the size of the pool will be passed to init()\n    var rng_psize = 256;\n\n    if (typeof exports !== 'undefined') {\n        exports = module.exports = {\n            default: BigInteger,\n            BigInteger: BigInteger,\n            SecureRandom: SecureRandom,\n        };\n    } else {\n        this.jsbn = {\n          BigInteger: BigInteger,\n          SecureRandom: SecureRandom\n        };\n    }\n\n}).call(this);\n", "/* eslint-disable class-methods-use-this */\r\nconst {BigInteger} = require('jsbn')\r\n\r\nfunction bigintToValue(bigint) {\r\n  let h = bigint.toString(16)\r\n  if (h[0] !== '-') {\r\n    // \u6B63\u6570\r\n    if (h.length % 2 === 1) h = '0' + h // \u8865\u9F50\u5230\u6574\u5B57\u8282\r\n    else if (!h.match(/^[0-7]/)) h = '00' + h // \u975E0\u5F00\u5934\uFF0C\u5219\u8865\u4E00\u4E2A\u51680\u5B57\u8282\r\n  } else {\r\n    // \u8D1F\u6570\r\n    h = h.substr(1)\r\n\r\n    let len = h.length\r\n    if (len % 2 === 1) len += 1 // \u8865\u9F50\u5230\u6574\u5B57\u8282\r\n    else if (!h.match(/^[0-7]/)) len += 2 // \u975E0\u5F00\u5934\uFF0C\u5219\u8865\u4E00\u4E2A\u51680\u5B57\u8282\r\n\r\n    let mask = ''\r\n    for (let i = 0; i < len; i++) mask += 'f'\r\n    mask = new BigInteger(mask, 16)\r\n\r\n    // \u5BF9\u7EDD\u5BF9\u503C\u53D6\u53CD\uFF0C\u52A01\r\n    h = mask.xor(bigint).add(BigInteger.ONE)\r\n    h = h.toString(16).replace(/^-/, '')\r\n  }\r\n  return h\r\n}\r\n\r\nclass ASN1Object {\r\n  constructor() {\r\n    this.tlv = null\r\n    this.t = '00'\r\n    this.l = '00'\r\n    this.v = ''\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6 der \u7F16\u7801\u6BD4\u7279\u6D4116\u8FDB\u5236\u4E32\r\n   */\r\n  getEncodedHex() {\r\n    if (!this.tlv) {\r\n      this.v = this.getValue()\r\n      this.l = this.getLength()\r\n      this.tlv = this.t + this.l + this.v\r\n    }\r\n    return this.tlv\r\n  }\r\n\r\n  getLength() {\r\n    const n = this.v.length / 2 // \u5B57\u8282\u6570\r\n    let nHex = n.toString(16)\r\n    if (nHex.length % 2 === 1) nHex = '0' + nHex // \u8865\u9F50\u5230\u6574\u5B57\u8282\r\n\r\n    if (n < 128) {\r\n      // \u77ED\u683C\u5F0F\uFF0C\u4EE5 0 \u5F00\u5934\r\n      return nHex\r\n    } else {\r\n      // \u957F\u683C\u5F0F\uFF0C\u4EE5 1 \u5F00\u5934\r\n      const head = 128 + nHex.length / 2 // 1(1\u4F4D) + \u771F\u6B63\u7684\u957F\u5EA6\u5360\u7528\u5B57\u8282\u6570(7\u4F4D) + \u771F\u6B63\u7684\u957F\u5EA6\r\n      return head.toString(16) + nHex\r\n    }\r\n  }\r\n\r\n  getValue() {\r\n    return ''\r\n  }\r\n}\r\n\r\nclass DERInteger extends ASN1Object {\r\n  constructor(bigint) {\r\n    super()\r\n\r\n    this.t = '02' // \u6574\u578B\u6807\u7B7E\u8BF4\u660E\r\n    if (bigint) this.v = bigintToValue(bigint)\r\n  }\r\n\r\n  getValue() {\r\n    return this.v\r\n  }\r\n}\r\n\r\nclass DERSequence extends ASN1Object {\r\n  constructor(asn1Array) {\r\n    super()\r\n\r\n    this.t = '30' // \u5E8F\u5217\u6807\u7B7E\u8BF4\u660E\r\n    this.asn1Array = asn1Array\r\n  }\r\n\r\n  getValue() {\r\n    this.v = this.asn1Array.map(asn1Object => asn1Object.getEncodedHex()).join('')\r\n    return this.v\r\n  }\r\n}\r\n\r\n/**\r\n * \u83B7\u53D6 l \u5360\u7528\u5B57\u8282\u6570\r\n */\r\nfunction getLenOfL(str, start) {\r\n  if (+str[start + 2] < 8) return 1 // l \u4EE50\u5F00\u5934\uFF0C\u5219\u8868\u793A\u77ED\u683C\u5F0F\uFF0C\u53EA\u5360\u4E00\u4E2A\u5B57\u8282\r\n  return +str.substr(start + 2, 2) & 0x7f + 1 // \u957F\u683C\u5F0F\uFF0C\u53D6\u7B2C\u4E00\u4E2A\u5B57\u8282\u540E7\u4F4D\u4F5C\u4E3A\u957F\u5EA6\u771F\u6B63\u5360\u7528\u5B57\u8282\u6570\uFF0C\u518D\u52A0\u4E0A\u672C\u8EAB\r\n}\r\n\r\n/**\r\n * \u83B7\u53D6 l\r\n */\r\nfunction getL(str, start) {\r\n  // \u83B7\u53D6 l\r\n  const len = getLenOfL(str, start)\r\n  const l = str.substr(start + 2, len * 2)\r\n\r\n  if (!l) return -1\r\n  const bigint = +l[0] < 8 ? new BigInteger(l, 16) : new BigInteger(l.substr(2), 16)\r\n\r\n  return bigint.intValue()\r\n}\r\n\r\n/**\r\n * \u83B7\u53D6 v \u7684\u4F4D\u7F6E\r\n */\r\nfunction getStartOfV(str, start) {\r\n  const len = getLenOfL(str, start)\r\n  return start + (len + 1) * 2\r\n}\r\n\r\nmodule.exports = {\r\n  /**\r\n   * ASN.1 der \u7F16\u7801\uFF0C\u9488\u5BF9 sm2 \u7B7E\u540D\r\n   */\r\n  encodeDer(r, s) {\r\n    const derR = new DERInteger(r)\r\n    const derS = new DERInteger(s)\r\n    const derSeq = new DERSequence([derR, derS])\r\n\r\n    return derSeq.getEncodedHex()\r\n  },\r\n\r\n  /**\r\n   * \u89E3\u6790 ASN.1 der\uFF0C\u9488\u5BF9 sm2 \u9A8C\u7B7E\r\n   */\r\n  decodeDer(input) {\r\n    // \u7ED3\u6784\uFF1A\r\n    // input = | tSeq | lSeq | vSeq |\r\n    // vSeq = | tR | lR | vR | tS | lS | vS |\r\n    const start = getStartOfV(input, 0)\r\n\r\n    const vIndexR = getStartOfV(input, start)\r\n    const lR = getL(input, start)\r\n    const vR = input.substr(vIndexR, lR * 2)\r\n\r\n    const nextStart = vIndexR + vR.length\r\n    const vIndexS = getStartOfV(input, nextStart)\r\n    const lS = getL(input, nextStart)\r\n    const vS = input.substr(vIndexS, lS * 2)\r\n\r\n    const r = new BigInteger(vR, 16)\r\n    const s = new BigInteger(vS, 16)\r\n\r\n    return {r, s}\r\n  }\r\n}\r\n", "/* eslint-disable no-case-declarations, max-len */\r\nconst {BigInteger} = require('jsbn')\r\n\r\n/**\r\n * thanks for Tom Wu : http://www-cs-students.stanford.edu/~tjw/jsbn/\r\n *\r\n * Basic Javascript Elliptic Curve implementation\r\n * Ported loosely from BouncyCastle's Java EC code\r\n * Only Fp curves implemented for now\r\n */\r\n\r\nconst TWO = new BigInteger('2')\r\nconst THREE = new BigInteger('3')\r\n\r\n/**\r\n * \u692D\u5706\u66F2\u7EBF\u57DF\u5143\u7D20\r\n */\r\nclass ECFieldElementFp {\r\n  constructor(q, x) {\r\n    this.x = x\r\n    this.q = q\r\n    // TODO if (x.compareTo(q) >= 0) error\r\n  }\r\n\r\n  /**\r\n   * \u5224\u65AD\u76F8\u7B49\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    return (this.q.equals(other.q) && this.x.equals(other.x))\r\n  }\r\n\r\n  /**\r\n   * \u8FD4\u56DE\u5177\u4F53\u6570\u503C\r\n   */\r\n  toBigInteger() {\r\n    return this.x\r\n  }\r\n\r\n  /**\r\n   * \u53D6\u53CD\r\n   */\r\n  negate() {\r\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * \u76F8\u52A0\r\n   */\r\n  add(b) {\r\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * \u76F8\u51CF\r\n   */\r\n  subtract(b) {\r\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * \u76F8\u4E58\r\n   */\r\n  multiply(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * \u76F8\u9664\r\n   */\r\n  divide(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * \u5E73\u65B9\r\n   */\r\n  square() {\r\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q))\r\n  }\r\n}\r\n\r\nclass ECPointFp {\r\n  constructor(curve, x, y, z) {\r\n    this.curve = curve\r\n    this.x = x\r\n    this.y = y\r\n    // \u6807\u51C6\u5C04\u5F71\u5750\u6807\u7CFB\uFF1Azinv == null \u6216 z * zinv == 1\r\n    this.z = z == null ? BigInteger.ONE : z\r\n    this.zinv = null\r\n    // TODO: compression flag\r\n  }\r\n\r\n  getX() {\r\n    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q)\r\n\r\n    return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))\r\n  }\r\n\r\n  getY() {\r\n    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q)\r\n\r\n    return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))\r\n  }\r\n\r\n  /**\r\n   * \u5224\u65AD\u76F8\u7B49\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    if (this.isInfinity()) return other.isInfinity()\r\n    if (other.isInfinity()) return this.isInfinity()\r\n\r\n    // u = y2 * z1 - y1 * z2\r\n    const u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q)\r\n    if (!u.equals(BigInteger.ZERO)) return false\r\n\r\n    // v = x2 * z1 - x1 * z2\r\n    const v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q)\r\n    return v.equals(BigInteger.ZERO)\r\n  }\r\n\r\n  /**\r\n   * \u662F\u5426\u662F\u65E0\u7A77\u8FDC\u70B9\r\n   */\r\n  isInfinity() {\r\n    if ((this.x === null) && (this.y === null)) return true\r\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO)\r\n  }\r\n\r\n  /**\r\n   * \u53D6\u53CD\uFF0Cx \u8F74\u5BF9\u79F0\u70B9\r\n   */\r\n  negate() {\r\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z)\r\n  }\r\n\r\n  /**\r\n   * \u76F8\u52A0\r\n   *\r\n   * \u6807\u51C6\u5C04\u5F71\u5750\u6807\u7CFB\uFF1A\r\n   *\r\n   * \u03BB1 = x1 * z2\r\n   * \u03BB2 = x2 * z1\r\n   * \u03BB3 = \u03BB1 \u2212 \u03BB2\r\n   * \u03BB4 = y1 * z2\r\n   * \u03BB5 = y2 * z1\r\n   * \u03BB6 = \u03BB4 \u2212 \u03BB5\r\n   * \u03BB7 = \u03BB1 + \u03BB2\r\n   * \u03BB8 = z1 * z2\r\n   * \u03BB9 = \u03BB3^2\r\n   * \u03BB10 = \u03BB3 * \u03BB9\r\n   * \u03BB11 = \u03BB8 * \u03BB6^2 \u2212 \u03BB7 * \u03BB9\r\n   * x3 = \u03BB3 * \u03BB11\r\n   * y3 = \u03BB6 * (\u03BB9 * \u03BB1 \u2212 \u03BB11) \u2212 \u03BB4 * \u03BB10\r\n   * z3 = \u03BB10 * \u03BB8\r\n   */\r\n  add(b) {\r\n    if (this.isInfinity()) return b\r\n    if (b.isInfinity()) return this\r\n\r\n    const x1 = this.x.toBigInteger()\r\n    const y1 = this.y.toBigInteger()\r\n    const z1 = this.z\r\n    const x2 = b.x.toBigInteger()\r\n    const y2 = b.y.toBigInteger()\r\n    const z2 = b.z\r\n    const q = this.curve.q\r\n\r\n    const w1 = x1.multiply(z2).mod(q)\r\n    const w2 = x2.multiply(z1).mod(q)\r\n    const w3 = w1.subtract(w2)\r\n    const w4 = y1.multiply(z2).mod(q)\r\n    const w5 = y2.multiply(z1).mod(q)\r\n    const w6 = w4.subtract(w5)\r\n\r\n    if (BigInteger.ZERO.equals(w3)) {\r\n      if (BigInteger.ZERO.equals(w6)) {\r\n        return this.twice() // this == b\uFF0C\u8BA1\u7B97\u81EA\u52A0\r\n      }\r\n      return this.curve.infinity // this == -b\uFF0C\u5219\u8FD4\u56DE\u65E0\u7A77\u8FDC\u70B9\r\n    }\r\n\r\n    const w7 = w1.add(w2)\r\n    const w8 = z1.multiply(z2).mod(q)\r\n    const w9 = w3.square().mod(q)\r\n    const w10 = w3.multiply(w9).mod(q)\r\n    const w11 = w8.multiply(w6.square()).subtract(w7.multiply(w9)).mod(q)\r\n\r\n    const x3 = w3.multiply(w11).mod(q)\r\n    const y3 = w6.multiply(w9.multiply(w1).subtract(w11)).subtract(w4.multiply(w10)).mod(q)\r\n    const z3 = w10.multiply(w8).mod(q)\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3)\r\n  }\r\n\r\n  /**\r\n   * \u81EA\u52A0\r\n   *\r\n   * \u6807\u51C6\u5C04\u5F71\u5750\u6807\u7CFB\uFF1A\r\n   *\r\n   * \u03BB1 = 3 * x1^2 + a * z1^2\r\n   * \u03BB2 = 2 * y1 * z1\r\n   * \u03BB3 = y1^2\r\n   * \u03BB4 = \u03BB3 * x1 * z1\r\n   * \u03BB5 = \u03BB2^2\r\n   * \u03BB6 = \u03BB1^2 \u2212 8 * \u03BB4\r\n   * x3 = \u03BB2 * \u03BB6\r\n   * y3 = \u03BB1 * (4 * \u03BB4 \u2212 \u03BB6) \u2212 2 * \u03BB5 * \u03BB3\r\n   * z3 = \u03BB2 * \u03BB5\r\n   */\r\n  twice() {\r\n    if (this.isInfinity()) return this\r\n    if (!this.y.toBigInteger().signum()) return this.curve.infinity\r\n\r\n    const x1 = this.x.toBigInteger()\r\n    const y1 = this.y.toBigInteger()\r\n    const z1 = this.z\r\n    const q = this.curve.q\r\n    const a = this.curve.a.toBigInteger()\r\n\r\n    const w1 = x1.square().multiply(THREE).add(a.multiply(z1.square())).mod(q)\r\n    const w2 = y1.shiftLeft(1).multiply(z1).mod(q)\r\n    const w3 = y1.square().mod(q)\r\n    const w4 = w3.multiply(x1).multiply(z1).mod(q)\r\n    const w5 = w2.square().mod(q)\r\n    const w6 = w1.square().subtract(w4.shiftLeft(3)).mod(q)\r\n\r\n    const x3 = w2.multiply(w6).mod(q)\r\n    const y3 = w1.multiply(w4.shiftLeft(2).subtract(w6)).subtract(w5.shiftLeft(1).multiply(w3)).mod(q)\r\n    const z3 = w2.multiply(w5).mod(q)\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3)\r\n  }\r\n\r\n  /**\r\n   * \u500D\u70B9\u8BA1\u7B97\r\n   */\r\n  multiply(k) {\r\n    if (this.isInfinity()) return this\r\n    if (!k.signum()) return this.curve.infinity\r\n\r\n    // \u4F7F\u7528\u52A0\u51CF\u6CD5\r\n    const k3 = k.multiply(THREE)\r\n    const neg = this.negate()\r\n    let Q = this\r\n\r\n    for (let i = k3.bitLength() - 2; i > 0; i--) {\r\n      Q = Q.twice()\r\n\r\n      const k3Bit = k3.testBit(i)\r\n      const kBit = k.testBit(i)\r\n\r\n      if (k3Bit !== kBit) {\r\n        Q = Q.add(k3Bit ? this : neg)\r\n      }\r\n    }\r\n\r\n    return Q\r\n  }\r\n}\r\n\r\n/**\r\n * \u692D\u5706\u66F2\u7EBF y^2 = x^3 + ax + b\r\n */\r\nclass ECCurveFp {\r\n  constructor(q, a, b) {\r\n    this.q = q\r\n    this.a = this.fromBigInteger(a)\r\n    this.b = this.fromBigInteger(b)\r\n    this.infinity = new ECPointFp(this, null, null) // \u65E0\u7A77\u8FDC\u70B9\r\n  }\r\n\r\n  /**\r\n   * \u5224\u65AD\u4E24\u4E2A\u692D\u5706\u66F2\u7EBF\u662F\u5426\u76F8\u7B49\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    return (this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b))\r\n  }\r\n\r\n  /**\r\n   * \u751F\u6210\u692D\u5706\u66F2\u7EBF\u57DF\u5143\u7D20\r\n   */\r\n  fromBigInteger(x) {\r\n    return new ECFieldElementFp(this.q, x)\r\n  }\r\n\r\n  /**\r\n   * \u89E3\u6790 16 \u8FDB\u5236\u4E32\u4E3A\u692D\u5706\u66F2\u7EBF\u70B9\r\n   */\r\n  decodePointHex(s) {\r\n    switch (parseInt(s.substr(0, 2), 16)) {\r\n      // \u7B2C\u4E00\u4E2A\u5B57\u8282\r\n      case 0:\r\n        return this.infinity\r\n      case 2:\r\n      case 3:\r\n        // \u538B\u7F29\r\n        const x = this.fromBigInteger(new BigInteger(s.substr(2), 16))\r\n        // \u5BF9 p \u2261 3 (mod4)\uFF0C\u5373\u5B58\u5728\u6B63\u6574\u6570 u\uFF0C\u4F7F\u5F97 p = 4u + 3\r\n        // \u8BA1\u7B97 y = (\u221A (x^3 + ax + b) % p)^(u + 1) modp\r\n        let y = this.fromBigInteger(x.multiply(x.square()).add(\r\n          x.multiply(this.a)\r\n        ).add(this.b).toBigInteger()\r\n          .modPow(\r\n            this.q.divide(new BigInteger('4')).add(BigInteger.ONE), this.q\r\n          ))\r\n        // \u7B97\u51FA\u7ED3\u679C 2 \u8FDB\u5236\u6700\u540E 1 \u4F4D\u4E0D\u7B49\u4E8E\u7B2C 1 \u4E2A\u5B57\u8282\u51CF 2 \u5219\u53D6\u53CD\r\n        if (!y.toBigInteger().mod(TWO).equals(new BigInteger(s.substr(0, 2), 16).subtract(TWO))) {\r\n          y = y.negate()\r\n        }\r\n        return new ECPointFp(this, x, y)\r\n      case 4:\r\n      case 6:\r\n      case 7:\r\n        const len = (s.length - 2) / 2\r\n        const xHex = s.substr(2, len)\r\n        const yHex = s.substr(len + 2, len)\r\n\r\n        return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)))\r\n      default:\r\n        // \u4E0D\u652F\u6301\r\n        return null\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  ECPointFp,\r\n  ECCurveFp,\r\n}\r\n", "/* eslint-disable no-bitwise, no-mixed-operators, no-use-before-define, max-len */\nconst {BigInteger, SecureRandom} = require('jsbn')\nconst {ECCurveFp} = require('./ec')\n\nconst rng = new SecureRandom()\nconst {curve, G, n} = generateEcparam()\n\n/**\n * \u83B7\u53D6\u516C\u5171\u692D\u5706\u66F2\u7EBF\n */\nfunction getGlobalCurve() {\n  return curve\n}\n\n/**\n * \u751F\u6210ecparam\n */\nfunction generateEcparam() {\n  // \u692D\u5706\u66F2\u7EBF\n  const p = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF', 16)\n  const a = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC', 16)\n  const b = new BigInteger('28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93', 16)\n  const curve = new ECCurveFp(p, a, b)\n\n  // \u57FA\u70B9\n  const gxHex = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7'\n  const gyHex = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0'\n  const G = curve.decodePointHex('04' + gxHex + gyHex)\n\n  const n = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123', 16)\n\n  return {curve, G, n}\n}\n\n/**\n * \u751F\u6210\u5BC6\u94A5\u5BF9\uFF1ApublicKey = privateKey * G\n */\nfunction generateKeyPairHex(a, b, c) {\n  const random = a ? new BigInteger(a, b, c) : new BigInteger(n.bitLength(), rng)\n  const d = random.mod(n.subtract(BigInteger.ONE)).add(BigInteger.ONE) // \u968F\u673A\u6570\n  const privateKey = leftPad(d.toString(16), 64)\n\n  const P = G.multiply(d) // P = dG\uFF0Cp \u4E3A\u516C\u94A5\uFF0Cd \u4E3A\u79C1\u94A5\n  const Px = leftPad(P.getX().toBigInteger().toString(16), 64)\n  const Py = leftPad(P.getY().toBigInteger().toString(16), 64)\n  const publicKey = '04' + Px + Py\n\n  return {privateKey, publicKey}\n}\n\n/**\n * \u751F\u6210\u538B\u7F29\u516C\u94A5\n */\nfunction compressPublicKeyHex(s) {\n  if (s.length !== 130) throw new Error('Invalid public key to compress')\n\n  const len = (s.length - 2) / 2\n  const xHex = s.substr(2, len)\n  const y = new BigInteger(s.substr(len + 2, len), 16)\n\n  let prefix = '03'\n  if (y.mod(new BigInteger('2')).equals(BigInteger.ZERO)) prefix = '02'\n\n  return prefix + xHex\n}\n\n/**\n * utf8\u4E32\u8F6C16\u8FDB\u5236\u4E32\n */\nfunction utf8ToHex(input) {\n  input = unescape(encodeURIComponent(input))\n\n  const length = input.length\n\n  // \u8F6C\u6362\u5230\u5B57\u6570\u7EC4\n  const words = []\n  for (let i = 0; i < length; i++) {\n    words[i >>> 2] |= (input.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8)\n  }\n\n  // \u8F6C\u6362\u523016\u8FDB\u5236\n  const hexChars = []\n  for (let i = 0; i < length; i++) {\n    const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff\n    hexChars.push((bite >>> 4).toString(16))\n    hexChars.push((bite & 0x0f).toString(16))\n  }\n\n  return hexChars.join('')\n}\n\n/**\n * \u8865\u516816\u8FDB\u5236\u5B57\u7B26\u4E32\n */\nfunction leftPad(input, num) {\n  if (input.length >= num) return input\n\n  return (new Array(num - input.length + 1)).join('0') + input\n}\n\n/**\n * \u8F6C\u621016\u8FDB\u5236\u4E32\n */\nfunction arrayToHex(arr) {\n  return arr.map(item => {\n    item = item.toString(16)\n    return item.length === 1 ? '0' + item : item\n  }).join('')\n}\n\n/**\n * \u8F6C\u6210utf8\u4E32\n */\nfunction arrayToUtf8(arr) {\n  const words = []\n  let j = 0\n  for (let i = 0; i < arr.length * 2; i += 2) {\n    words[i >>> 3] |= parseInt(arr[j], 10) << (24 - (i % 8) * 4)\n    j++\n  }\n\n  try {\n    const latin1Chars = []\n\n    for (let i = 0; i < arr.length; i++) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff\n      latin1Chars.push(String.fromCharCode(bite))\n    }\n\n    return decodeURIComponent(escape(latin1Chars.join('')))\n  } catch (e) {\n    throw new Error('Malformed UTF-8 data')\n  }\n}\n\n/**\n * \u8F6C\u6210\u5B57\u8282\u6570\u7EC4\n */\nfunction hexToArray(hexStr) {\n  const words = []\n  let hexStrLength = hexStr.length\n\n  if (hexStrLength % 2 !== 0) {\n    hexStr = leftPad(hexStr, hexStrLength + 1)\n  }\n\n  hexStrLength = hexStr.length\n\n  for (let i = 0; i < hexStrLength; i += 2) {\n    words.push(parseInt(hexStr.substr(i, 2), 16))\n  }\n  return words\n}\n\n/**\n * \u9A8C\u8BC1\u516C\u94A5\u662F\u5426\u4E3A\u692D\u5706\u66F2\u7EBF\u4E0A\u7684\u70B9\n */\nfunction verifyPublicKey(publicKey) {\n  const point = curve.decodePointHex(publicKey)\n  if (!point) return false\n\n  const x = point.getX()\n  const y = point.getY()\n\n  // \u9A8C\u8BC1 y^2 \u662F\u5426\u7B49\u4E8E x^3 + ax + b\n  return y.square().equals(x.multiply(x.square()).add(x.multiply(curve.a)).add(curve.b))\n}\n\n/**\n * \u9A8C\u8BC1\u516C\u94A5\u662F\u5426\u7B49\u4EF7\uFF0C\u7B49\u4EF7\u8FD4\u56DEtrue\n */\nfunction comparePublicKeyHex(publicKey1, publicKey2) {\n  const point1 = curve.decodePointHex(publicKey1)\n  if (!point1) return false\n\n  const point2 = curve.decodePointHex(publicKey2)\n  if (!point2) return false\n\n  return point1.equals(point2)\n}\n\nmodule.exports = {\n  getGlobalCurve,\n  generateEcparam,\n  generateKeyPairHex,\n  compressPublicKeyHex,\n  utf8ToHex,\n  leftPad,\n  arrayToHex,\n  arrayToUtf8,\n  hexToArray,\n  verifyPublicKey,\n  comparePublicKeyHex,\n}\n", "// \u6D88\u606F\u6269\u5C55\nconst W = new Uint32Array(68)\nconst M = new Uint32Array(64) // W'\n\n/**\n * \u5FAA\u73AF\u5DE6\u79FB\n */\nfunction rotl(x, n) {\n  const s = n & 31\n  return (x << s) | (x >>> (32 - s))\n}\n\n/**\n * \u4E8C\u8FDB\u5236\u5F02\u6216\u8FD0\u7B97\n */\nfunction xor(x, y) {\n  const result = []\n  for (let i = x.length - 1; i >= 0; i--) result[i] = (x[i] ^ y[i]) & 0xff\n  return result\n}\n\n/**\n * \u538B\u7F29\u51FD\u6570\u4E2D\u7684\u7F6E\u6362\u51FD\u6570 P0(X) = X xor (X <<< 9) xor (X <<< 17)\n */\nfunction P0(X) {\n  return (X ^ rotl(X, 9)) ^ rotl(X, 17)\n}\n\n/**\n * \u6D88\u606F\u6269\u5C55\u4E2D\u7684\u7F6E\u6362\u51FD\u6570 P1(X) = X xor (X <<< 15) xor (X <<< 23)\n */\nfunction P1(X) {\n  return (X ^ rotl(X, 15)) ^ rotl(X, 23)\n}\n\n/**\n * sm3 \u672C\u4F53\n */\nfunction sm3(array) {\n  let len = array.length * 8\n\n  // k \u662F\u6EE1\u8DB3 len + 1 + k = 448mod512 \u7684\u6700\u5C0F\u7684\u975E\u8D1F\u6574\u6570\n  let k = len % 512\n  // \u5982\u679C 448 <= (512 % len) < 512\uFF0C\u9700\u8981\u591A\u8865\u5145 (len % 448) \u6BD4\u7279'0'\u4EE5\u6EE1\u8DB3\u603B\u6BD4\u7279\u957F\u5EA6\u4E3A512\u7684\u500D\u6570\n  k = k >= 448 ? 512 - (k % 448) - 1 : 448 - k - 1\n\n  // \u586B\u5145\n  const kArr = new Array((k - 7) / 8)\n  const lenArr = new Array(8)\n  for (let i = 0, len = kArr.length; i < len; i++) kArr[i] = 0\n  for (let i = 0, len = lenArr.length; i < len; i++) lenArr[i] = 0\n  len = len.toString(2)\n  for (let i = 7; i >= 0; i--) {\n    if (len.length > 8) {\n      const start = len.length - 8\n      lenArr[i] = parseInt(len.substr(start), 2)\n      len = len.substr(0, start)\n    } else if (len.length > 0) {\n      lenArr[i] = parseInt(len, 2)\n      len = ''\n    }\n  }\n  const m = new Uint8Array([...array, 0x80, ...kArr, ...lenArr])\n  const dataView = new DataView(m.buffer, 0)\n\n  // \u8FED\u4EE3\u538B\u7F29\n  const n = m.length / 64\n  const V = new Uint32Array([0x7380166f, 0x4914b2b9, 0x172442d7, 0xda8a0600, 0xa96f30bc, 0x163138aa, 0xe38dee4d, 0xb0fb0e4e])\n  for (let i = 0; i < n; i++) {\n    W.fill(0)\n    M.fill(0)\n\n    // \u5C06\u6D88\u606F\u5206\u7EC4B\u5212\u5206\u4E3A 16 \u4E2A\u5B57 W0\uFF0C W1\uFF0C\u2026\u2026\uFF0CW15\n    const start = 16 * i\n    for (let j = 0; j < 16; j++) {\n      W[j] = dataView.getUint32((start + j) * 4, false)\n    }\n\n    // W16 \uFF5E W67\uFF1AW[j] <- P1(W[j\u221216] xor W[j\u22129] xor (W[j\u22123] <<< 15)) xor (W[j\u221213] <<< 7) xor W[j\u22126]\n    for (let j = 16; j < 68; j++) {\n      W[j] = (P1((W[j - 16] ^ W[j - 9]) ^ rotl(W[j - 3], 15)) ^ rotl(W[j - 13], 7)) ^ W[j - 6]\n    }\n\n    // W\u20320 \uFF5E W\u203263\uFF1AW\u2032[j] = W[j] xor W[j+4]\n    for (let j = 0; j < 64; j++) {\n      M[j] = W[j] ^ W[j + 4]\n    }\n\n    // \u538B\u7F29\n    const T1 = 0x79cc4519\n    const T2 = 0x7a879d8a\n    // \u5B57\u5BC4\u5B58\u5668\n    let A = V[0]\n    let B = V[1]\n    let C = V[2]\n    let D = V[3]\n    let E = V[4]\n    let F = V[5]\n    let G = V[6]\n    let H = V[7]\n    // \u4E2D\u95F4\u53D8\u91CF\n    let SS1\n    let SS2\n    let TT1\n    let TT2\n    let T\n    for (let j = 0; j < 64; j++) {\n      T = j >= 0 && j <= 15 ? T1 : T2\n      SS1 = rotl(rotl(A, 12) + E + rotl(T, j), 7)\n      SS2 = SS1 ^ rotl(A, 12)\n\n      TT1 = (j >= 0 && j <= 15 ? ((A ^ B) ^ C) : (((A & B) | (A & C)) | (B & C))) + D + SS2 + M[j]\n      TT2 = (j >= 0 && j <= 15 ? ((E ^ F) ^ G) : ((E & F) | ((~E) & G))) + H + SS1 + W[j]\n\n      D = C\n      C = rotl(B, 9)\n      B = A\n      A = TT1\n      H = G\n      G = rotl(F, 19)\n      F = E\n      E = P0(TT2)\n    }\n\n    V[0] ^= A\n    V[1] ^= B\n    V[2] ^= C\n    V[3] ^= D\n    V[4] ^= E\n    V[5] ^= F\n    V[6] ^= G\n    V[7] ^= H\n  }\n\n  // \u8F6C\u56DE uint8\n  const result = []\n  for (let i = 0, len = V.length; i < len; i++) {\n    const word = V[i]\n    result.push((word & 0xff000000) >>> 24, (word & 0xff0000) >>> 16, (word & 0xff00) >>> 8, word & 0xff)\n  }\n\n  return result\n}\n\n/**\n * hmac \u5B9E\u73B0\n */\nconst blockLen = 64\nconst iPad = new Uint8Array(blockLen)\nconst oPad = new Uint8Array(blockLen)\nfor (let i = 0; i < blockLen; i++) {\n  iPad[i] = 0x36\n  oPad[i] = 0x5c\n}\nfunction hmac(input, key) {\n  // \u5BC6\u94A5\u586B\u5145\n  if (key.length > blockLen) key = sm3(key)\n  while (key.length < blockLen) key.push(0)\n\n  const iPadKey = xor(key, iPad)\n  const oPadKey = xor(key, oPad)\n\n  const hash = sm3([...iPadKey, ...input])\n  return sm3([...oPadKey, ...hash])\n}\n\nmodule.exports = {\n  sm3,\n  hmac,\n}\n", "/* eslint-disable no-use-before-define */\nconst {BigInteger} = require('jsbn')\nconst {encodeDer, decodeDer} = require('./asn1')\nconst _ = require('./utils')\nconst sm3 = require('./sm3').sm3\n\nconst {G, curve, n} = _.generateEcparam()\nconst C1C2C3 = 0\n\n/**\n * \u52A0\u5BC6\n */\nfunction doEncrypt(msg, publicKey, cipherMode = 1) {\n  msg = typeof msg === 'string' ? _.hexToArray(_.utf8ToHex(msg)) : Array.prototype.slice.call(msg)\n  publicKey = _.getGlobalCurve().decodePointHex(publicKey) // \u5148\u5C06\u516C\u94A5\u8F6C\u6210\u70B9\n\n  const keypair = _.generateKeyPairHex()\n  const k = new BigInteger(keypair.privateKey, 16) // \u968F\u673A\u6570 k\n\n  // c1 = k * G\n  let c1 = keypair.publicKey\n  if (c1.length > 128) c1 = c1.substr(c1.length - 128)\n\n  // (x2, y2) = k * publicKey\n  const p = publicKey.multiply(k)\n  const x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64))\n  const y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64))\n\n  // c3 = hash(x2 || msg || y2)\n  const c3 = _.arrayToHex(sm3([].concat(x2, msg, y2)))\n\n  let ct = 1\n  let offset = 0\n  let t = [] // 256 \u4F4D\n  const z = [].concat(x2, y2)\n  const nextT = () => {\n    // (1) Hai = hash(z || ct)\n    // (2) ct++\n    t = sm3([...z, ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff])\n    ct++\n    offset = 0\n  }\n  nextT() // \u5148\u751F\u6210 Ha1\n\n  for (let i = 0, len = msg.length; i < len; i++) {\n    // t = Ha1 || Ha2 || Ha3 || Ha4\n    if (offset === t.length) nextT()\n\n    // c2 = msg ^ t\n    msg[i] ^= t[offset++] & 0xff\n  }\n  const c2 = _.arrayToHex(msg)\n\n  return cipherMode === C1C2C3 ? c1 + c2 + c3 : c1 + c3 + c2\n}\n\n/**\n * \u89E3\u5BC6\n */\nfunction doDecrypt(encryptData, privateKey, cipherMode = 1, {\n  output = 'string',\n} = {}) {\n  privateKey = new BigInteger(privateKey, 16)\n\n  let c3 = encryptData.substr(128, 64)\n  let c2 = encryptData.substr(128 + 64)\n\n  if (cipherMode === C1C2C3) {\n    c3 = encryptData.substr(encryptData.length - 64)\n    c2 = encryptData.substr(128, encryptData.length - 128 - 64)\n  }\n\n  const msg = _.hexToArray(c2)\n  const c1 = _.getGlobalCurve().decodePointHex('04' + encryptData.substr(0, 128))\n\n  const p = c1.multiply(privateKey)\n  const x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64))\n  const y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64))\n\n  let ct = 1\n  let offset = 0\n  let t = [] // 256 \u4F4D\n  const z = [].concat(x2, y2)\n  const nextT = () => {\n    // (1) Hai = hash(z || ct)\n    // (2) ct++\n    t = sm3([...z, ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff])\n    ct++\n    offset = 0\n  }\n  nextT() // \u5148\u751F\u6210 Ha1\n\n  for (let i = 0, len = msg.length; i < len; i++) {\n    // t = Ha1 || Ha2 || Ha3 || Ha4\n    if (offset === t.length) nextT()\n\n    // c2 = msg ^ t\n    msg[i] ^= t[offset++] & 0xff\n  }\n\n  // c3 = hash(x2 || msg || y2)\n  const checkC3 = _.arrayToHex(sm3([].concat(x2, msg, y2)))\n\n  if (checkC3 === c3.toLowerCase()) {\n    return output === 'array' ? msg : _.arrayToUtf8(msg)\n  } else {\n    return output === 'array' ? [] : ''\n  }\n}\n\n/**\n * \u7B7E\u540D\n */\nfunction doSignature(msg, privateKey, {\n  pointPool, der, hash, publicKey, userId\n} = {}) {\n  let hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg)\n\n  if (hash) {\n    // sm3\u6742\u51D1\n    publicKey = publicKey || getPublicKeyFromPrivateKey(privateKey)\n    hashHex = getHash(hashHex, publicKey, userId)\n  }\n\n  const dA = new BigInteger(privateKey, 16)\n  const e = new BigInteger(hashHex, 16)\n\n  // k\n  let k = null\n  let r = null\n  let s = null\n\n  do {\n    do {\n      let point\n      if (pointPool && pointPool.length) {\n        point = pointPool.pop()\n      } else {\n        point = getPoint()\n      }\n      k = point.k\n\n      // r = (e + x1) mod n\n      r = e.add(point.x1).mod(n)\n    } while (r.equals(BigInteger.ZERO) || r.add(k).equals(n))\n\n    // s = ((1 + dA)^-1 * (k - r * dA)) mod n\n    s = dA.add(BigInteger.ONE).modInverse(n).multiply(k.subtract(r.multiply(dA))).mod(n)\n  } while (s.equals(BigInteger.ZERO))\n\n  if (der) return encodeDer(r, s) // asn.1 der \u7F16\u7801\n\n  return _.leftPad(r.toString(16), 64) + _.leftPad(s.toString(16), 64)\n}\n\n/**\n * \u9A8C\u7B7E\n */\nfunction doVerifySignature(msg, signHex, publicKey, {der, hash, userId} = {}) {\n  let hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg)\n\n  if (hash) {\n    // sm3\u6742\u51D1\n    hashHex = getHash(hashHex, publicKey, userId)\n  }\n\n  let r; let\n    s\n  if (der) {\n    const decodeDerObj = decodeDer(signHex) // asn.1 der \u89E3\u7801\n    r = decodeDerObj.r\n    s = decodeDerObj.s\n  } else {\n    r = new BigInteger(signHex.substring(0, 64), 16)\n    s = new BigInteger(signHex.substring(64), 16)\n  }\n\n  const PA = curve.decodePointHex(publicKey)\n  const e = new BigInteger(hashHex, 16)\n\n  // t = (r + s) mod n\n  const t = r.add(s).mod(n)\n\n  if (t.equals(BigInteger.ZERO)) return false\n\n  // x1y1 = s * G + t * PA\n  const x1y1 = G.multiply(s).add(PA.multiply(t))\n\n  // R = (e + x1) mod n\n  const R = e.add(x1y1.getX().toBigInteger()).mod(n)\n\n  return r.equals(R)\n}\n\n/**\n * sm3\u6742\u51D1\u7B97\u6CD5\n */\nfunction getHash(hashHex, publicKey, userId = '1234567812345678') {\n  // z = hash(entl || userId || a || b || gx || gy || px || py)\n  userId = _.utf8ToHex(userId)\n  const a = _.leftPad(G.curve.a.toBigInteger().toRadix(16), 64)\n  const b = _.leftPad(G.curve.b.toBigInteger().toRadix(16), 64)\n  const gx = _.leftPad(G.getX().toBigInteger().toRadix(16), 64)\n  const gy = _.leftPad(G.getY().toBigInteger().toRadix(16), 64)\n  let px\n  let py\n  if (publicKey.length === 128) {\n    px = publicKey.substr(0, 64)\n    py = publicKey.substr(64, 64)\n  } else {\n    const point = G.curve.decodePointHex(publicKey)\n    px = _.leftPad(point.getX().toBigInteger().toRadix(16), 64)\n    py = _.leftPad(point.getY().toBigInteger().toRadix(16), 64)\n  }\n  const data = _.hexToArray(userId + a + b + gx + gy + px + py)\n\n  const entl = userId.length * 4\n  data.unshift(entl & 0x00ff)\n  data.unshift(entl >> 8 & 0x00ff)\n\n  const z = sm3(data)\n\n  // e = hash(z || msg)\n  return _.arrayToHex(sm3(z.concat(_.hexToArray(hashHex))))\n}\n\n/**\n * \u8BA1\u7B97\u516C\u94A5\n */\nfunction getPublicKeyFromPrivateKey(privateKey) {\n  const PA = G.multiply(new BigInteger(privateKey, 16))\n  const x = _.leftPad(PA.getX().toBigInteger().toString(16), 64)\n  const y = _.leftPad(PA.getY().toBigInteger().toString(16), 64)\n  return '04' + x + y\n}\n\n/**\n * \u83B7\u53D6\u692D\u5706\u66F2\u7EBF\u70B9\n */\nfunction getPoint() {\n  const keypair = _.generateKeyPairHex()\n  const PA = curve.decodePointHex(keypair.publicKey)\n\n  keypair.k = new BigInteger(keypair.privateKey, 16)\n  keypair.x1 = PA.getX().toBigInteger()\n\n  return keypair\n}\n\nmodule.exports = {\n  generateKeyPairHex: _.generateKeyPairHex,\n  compressPublicKeyHex: _.compressPublicKeyHex,\n  comparePublicKeyHex: _.comparePublicKeyHex,\n  doEncrypt,\n  doDecrypt,\n  doSignature,\n  doVerifySignature,\n  getPoint,\n  verifyPublicKey: _.verifyPublicKey,\n}\n", "const {sm3, hmac} = require('../sm2/sm3')\n\n/**\n * \u8865\u516816\u8FDB\u5236\u5B57\u7B26\u4E32\n */\nfunction leftPad(input, num) {\n  if (input.length >= num) return input\n\n  return (new Array(num - input.length + 1)).join('0') + input\n}\n\n/**\n * \u5B57\u8282\u6570\u7EC4\u8F6C 16 \u8FDB\u5236\u4E32\n */\nfunction ArrayToHex(arr) {\n  return arr.map(item => {\n    item = item.toString(16)\n    return item.length === 1 ? '0' + item : item\n  }).join('')\n}\n\n/**\n * \u8F6C\u6210\u5B57\u8282\u6570\u7EC4\n */\nfunction hexToArray(hexStr) {\n  const words = []\n  let hexStrLength = hexStr.length\n\n  if (hexStrLength % 2 !== 0) {\n    hexStr = leftPad(hexStr, hexStrLength + 1)\n  }\n\n  hexStrLength = hexStr.length\n\n  for (let i = 0; i < hexStrLength; i += 2) {\n    words.push(parseInt(hexStr.substr(i, 2), 16))\n  }\n  return words\n}\n\n/**\n * utf8 \u4E32\u8F6C\u5B57\u8282\u6570\u7EC4\n */\nfunction utf8ToArray(str) {\n  const arr = []\n\n  for (let i = 0, len = str.length; i < len; i++) {\n    const point = str.codePointAt(i)\n\n    if (point <= 0x007f) {\n      // \u5355\u5B57\u8282\uFF0C\u6807\u91CF\u503C\uFF1A00000000 00000000 0zzzzzzz\n      arr.push(point)\n    } else if (point <= 0x07ff) {\n      // \u53CC\u5B57\u8282\uFF0C\u6807\u91CF\u503C\uFF1A00000000 00000yyy yyzzzzzz\n      arr.push(0xc0 | (point >>> 6)) // 110yyyyy\uFF080xc0-0xdf\uFF09\n      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz\uFF080x80-0xbf\uFF09\n    } else if (point <= 0xD7FF || (point >= 0xE000 && point <= 0xFFFF)) {\n      // \u4E09\u5B57\u8282\uFF1A\u6807\u91CF\u503C\uFF1A00000000 xxxxyyyy yyzzzzzz\n      arr.push(0xe0 | (point >>> 12)) // 1110xxxx\uFF080xe0-0xef\uFF09\n      arr.push(0x80 | ((point >>> 6) & 0x3f)) // 10yyyyyy\uFF080x80-0xbf\uFF09\n      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz\uFF080x80-0xbf\uFF09\n    } else if (point >= 0x010000 && point <= 0x10FFFF) {\n      // \u56DB\u5B57\u8282\uFF1A\u6807\u91CF\u503C\uFF1A000wwwxx xxxxyyyy yyzzzzzz\n      i++\n      arr.push((0xf0 | (point >>> 18) & 0x1c)) // 11110www\uFF080xf0-0xf7\uFF09\n      arr.push((0x80 | ((point >>> 12) & 0x3f))) // 10xxxxxx\uFF080x80-0xbf\uFF09\n      arr.push((0x80 | ((point >>> 6) & 0x3f))) // 10yyyyyy\uFF080x80-0xbf\uFF09\n      arr.push((0x80 | (point & 0x3f))) // 10zzzzzz\uFF080x80-0xbf\uFF09\n    } else {\n      // \u4E94\u3001\u516D\u5B57\u8282\uFF0C\u6682\u65F6\u4E0D\u652F\u6301\n      arr.push(point)\n      throw new Error('input is not supported')\n    }\n  }\n\n  return arr\n}\n\nmodule.exports = function (input, options) {\n  input = typeof input === 'string' ? utf8ToArray(input) : Array.prototype.slice.call(input)\n\n  if (options) {\n    const mode = options.mode || 'hmac'\n    if (mode !== 'hmac') throw new Error('invalid mode')\n\n    let key = options.key\n    if (!key) throw new Error('invalid key')\n\n    key = typeof key === 'string' ? hexToArray(key) : Array.prototype.slice.call(key)\n    return ArrayToHex(hmac(input, key))\n  }\n\n  return ArrayToHex(sm3(input))\n}\n", "/* eslint-disable no-bitwise, no-mixed-operators, complexity */\r\nconst DECRYPT = 0\r\nconst ROUND = 32\r\nconst BLOCK = 16\r\n\r\nconst Sbox = [\r\n  0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,\r\n  0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,\r\n  0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,\r\n  0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,\r\n  0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,\r\n  0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,\r\n  0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,\r\n  0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,\r\n  0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,\r\n  0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,\r\n  0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,\r\n  0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,\r\n  0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,\r\n  0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,\r\n  0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,\r\n  0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48\r\n]\r\n\r\nconst CK = [\r\n  0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,\r\n  0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,\r\n  0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,\r\n  0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,\r\n  0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,\r\n  0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,\r\n  0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,\r\n  0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279\r\n]\r\n\r\n/**\r\n * 16 \u8FDB\u5236\u4E32\u8F6C\u5B57\u8282\u6570\u7EC4\r\n */\r\nfunction hexToArray(str) {\r\n  const arr = []\r\n  for (let i = 0, len = str.length; i < len; i += 2) {\r\n    arr.push(parseInt(str.substr(i, 2), 16))\r\n  }\r\n  return arr\r\n}\r\n\r\n/**\r\n * \u5B57\u8282\u6570\u7EC4\u8F6C 16 \u8FDB\u5236\u4E32\r\n */\r\nfunction ArrayToHex(arr) {\r\n  return arr.map(item => {\r\n    item = item.toString(16)\r\n    return item.length === 1 ? '0' + item : item\r\n  }).join('')\r\n}\r\n\r\n/**\r\n * utf8 \u4E32\u8F6C\u5B57\u8282\u6570\u7EC4\r\n */\r\nfunction utf8ToArray(str) {\r\n  const arr = []\r\n\r\n  for (let i = 0, len = str.length; i < len; i++) {\r\n    const point = str.codePointAt(i)\r\n\r\n    if (point <= 0x007f) {\r\n      // \u5355\u5B57\u8282\uFF0C\u6807\u91CF\u503C\uFF1A00000000 00000000 0zzzzzzz\r\n      arr.push(point)\r\n    } else if (point <= 0x07ff) {\r\n      // \u53CC\u5B57\u8282\uFF0C\u6807\u91CF\u503C\uFF1A00000000 00000yyy yyzzzzzz\r\n      arr.push(0xc0 | (point >>> 6)) // 110yyyyy\uFF080xc0-0xdf\uFF09\r\n      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz\uFF080x80-0xbf\uFF09\r\n    } else if (point <= 0xD7FF || (point >= 0xE000 && point <= 0xFFFF)) {\r\n      // \u4E09\u5B57\u8282\uFF1A\u6807\u91CF\u503C\uFF1A00000000 xxxxyyyy yyzzzzzz\r\n      arr.push(0xe0 | (point >>> 12)) // 1110xxxx\uFF080xe0-0xef\uFF09\r\n      arr.push(0x80 | ((point >>> 6) & 0x3f)) // 10yyyyyy\uFF080x80-0xbf\uFF09\r\n      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz\uFF080x80-0xbf\uFF09\r\n    } else if (point >= 0x010000 && point <= 0x10FFFF) {\r\n      // \u56DB\u5B57\u8282\uFF1A\u6807\u91CF\u503C\uFF1A000wwwxx xxxxyyyy yyzzzzzz\r\n      i++\r\n      arr.push((0xf0 | (point >>> 18) & 0x1c)) // 11110www\uFF080xf0-0xf7\uFF09\r\n      arr.push((0x80 | ((point >>> 12) & 0x3f))) // 10xxxxxx\uFF080x80-0xbf\uFF09\r\n      arr.push((0x80 | ((point >>> 6) & 0x3f))) // 10yyyyyy\uFF080x80-0xbf\uFF09\r\n      arr.push((0x80 | (point & 0x3f))) // 10zzzzzz\uFF080x80-0xbf\uFF09\r\n    } else {\r\n      // \u4E94\u3001\u516D\u5B57\u8282\uFF0C\u6682\u65F6\u4E0D\u652F\u6301\r\n      arr.push(point)\r\n      throw new Error('input is not supported')\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\n/**\r\n * \u5B57\u8282\u6570\u7EC4\u8F6C utf8 \u4E32\r\n */\r\nfunction arrayToUtf8(arr) {\r\n  const str = []\r\n  for (let i = 0, len = arr.length; i < len; i++) {\r\n    if (arr[i] >= 0xf0 && arr[i] <= 0xf7) {\r\n      // \u56DB\u5B57\u8282\r\n      str.push(String.fromCodePoint(((arr[i] & 0x07) << 18) + ((arr[i + 1] & 0x3f) << 12) + ((arr[i + 2] & 0x3f) << 6) + (arr[i + 3] & 0x3f)))\r\n      i += 3\r\n    } else if (arr[i] >= 0xe0 && arr[i] <= 0xef) {\r\n      // \u4E09\u5B57\u8282\r\n      str.push(String.fromCodePoint(((arr[i] & 0x0f) << 12) + ((arr[i + 1] & 0x3f) << 6) + (arr[i + 2] & 0x3f)))\r\n      i += 2\r\n    } else if (arr[i] >= 0xc0 && arr[i] <= 0xdf) {\r\n      // \u53CC\u5B57\u8282\r\n      str.push(String.fromCodePoint(((arr[i] & 0x1f) << 6) + (arr[i + 1] & 0x3f)))\r\n      i++\r\n    } else {\r\n      // \u5355\u5B57\u8282\r\n      str.push(String.fromCodePoint(arr[i]))\r\n    }\r\n  }\r\n\r\n  return str.join('')\r\n}\r\n\r\n/**\r\n * 32 \u6BD4\u7279\u5FAA\u73AF\u5DE6\u79FB\r\n */\r\nfunction rotl(x, y) {\r\n  return x << y | x >>> (32 - y)\r\n}\r\n\r\n/**\r\n * \u975E\u7EBF\u6027\u53D8\u6362\r\n */\r\nfunction byteSub(a) {\r\n  return (Sbox[a >>> 24 & 0xFF] & 0xFF) << 24 |\r\n    (Sbox[a >>> 16 & 0xFF] & 0xFF) << 16 |\r\n    (Sbox[a >>> 8 & 0xFF] & 0xFF) << 8 |\r\n    (Sbox[a & 0xFF] & 0xFF)\r\n}\r\n\r\n/**\r\n * \u7EBF\u6027\u53D8\u6362\uFF0C\u52A0\u5BC6/\u89E3\u5BC6\u7528\r\n */\r\nfunction l1(b) {\r\n  return b ^ rotl(b, 2) ^ rotl(b, 10) ^ rotl(b, 18) ^ rotl(b, 24)\r\n}\r\n\r\n/**\r\n * \u7EBF\u6027\u53D8\u6362\uFF0C\u751F\u6210\u8F6E\u5BC6\u94A5\u7528\r\n */\r\nfunction l2(b) {\r\n  return b ^ rotl(b, 13) ^ rotl(b, 23)\r\n}\r\n\r\n/**\r\n * \u4EE5\u4E00\u7EC4 128 \u6BD4\u7279\u8FDB\u884C\u52A0\u5BC6/\u89E3\u5BC6\u64CD\u4F5C\r\n */\r\nfunction sms4Crypt(input, output, roundKey) {\r\n  const x = new Array(4)\r\n\r\n  // \u5B57\u8282\u6570\u7EC4\u8F6C\u6210\u5B57\u6570\u7EC4\uFF08\u6B64\u5904 1 \u5B57 = 32 \u6BD4\u7279\uFF09\r\n  const tmp = new Array(4)\r\n  for (let i = 0; i < 4; i++) {\r\n    tmp[0] = input[4 * i] & 0xff\r\n    tmp[1] = input[4 * i + 1] & 0xff\r\n    tmp[2] = input[4 * i + 2] & 0xff\r\n    tmp[3] = input[4 * i + 3] & 0xff\r\n    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3]\r\n  }\r\n\r\n  // x[i + 4] = x[i] ^ l1(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ roundKey[i]))\r\n  for (let r = 0, mid; r < 32; r += 4) {\r\n    mid = x[1] ^ x[2] ^ x[3] ^ roundKey[r + 0]\r\n    x[0] ^= l1(byteSub(mid)) // x[4]\r\n\r\n    mid = x[2] ^ x[3] ^ x[0] ^ roundKey[r + 1]\r\n    x[1] ^= l1(byteSub(mid)) // x[5]\r\n\r\n    mid = x[3] ^ x[0] ^ x[1] ^ roundKey[r + 2]\r\n    x[2] ^= l1(byteSub(mid)) // x[6]\r\n\r\n    mid = x[0] ^ x[1] ^ x[2] ^ roundKey[r + 3]\r\n    x[3] ^= l1(byteSub(mid)) // x[7]\r\n  }\r\n\r\n  // \u53CD\u5E8F\u53D8\u6362\r\n  for (let j = 0; j < 16; j += 4) {\r\n    output[j] = x[3 - j / 4] >>> 24 & 0xff\r\n    output[j + 1] = x[3 - j / 4] >>> 16 & 0xff\r\n    output[j + 2] = x[3 - j / 4] >>> 8 & 0xff\r\n    output[j + 3] = x[3 - j / 4] & 0xff\r\n  }\r\n}\r\n\r\n/**\r\n * \u5BC6\u94A5\u6269\u5C55\u7B97\u6CD5\r\n */\r\nfunction sms4KeyExt(key, roundKey, cryptFlag) {\r\n  const x = new Array(4)\r\n\r\n  // \u5B57\u8282\u6570\u7EC4\u8F6C\u6210\u5B57\u6570\u7EC4\uFF08\u6B64\u5904 1 \u5B57 = 32 \u6BD4\u7279\uFF09\r\n  const tmp = new Array(4)\r\n  for (let i = 0; i < 4; i++) {\r\n    tmp[0] = key[0 + 4 * i] & 0xff\r\n    tmp[1] = key[1 + 4 * i] & 0xff\r\n    tmp[2] = key[2 + 4 * i] & 0xff\r\n    tmp[3] = key[3 + 4 * i] & 0xff\r\n    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3]\r\n  }\r\n\r\n  // \u4E0E\u7CFB\u7EDF\u53C2\u6570\u505A\u5F02\u6216\r\n  x[0] ^= 0xa3b1bac6\r\n  x[1] ^= 0x56aa3350\r\n  x[2] ^= 0x677d9197\r\n  x[3] ^= 0xb27022dc\r\n\r\n  // roundKey[i] = x[i + 4] = x[i] ^ l2(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ CK[i]))\r\n  for (let r = 0, mid; r < 32; r += 4) {\r\n    mid = x[1] ^ x[2] ^ x[3] ^ CK[r + 0]\r\n    roundKey[r + 0] = x[0] ^= l2(byteSub(mid)) // x[4]\r\n\r\n    mid = x[2] ^ x[3] ^ x[0] ^ CK[r + 1]\r\n    roundKey[r + 1] = x[1] ^= l2(byteSub(mid)) // x[5]\r\n\r\n    mid = x[3] ^ x[0] ^ x[1] ^ CK[r + 2]\r\n    roundKey[r + 2] = x[2] ^= l2(byteSub(mid)) // x[6]\r\n\r\n    mid = x[0] ^ x[1] ^ x[2] ^ CK[r + 3]\r\n    roundKey[r + 3] = x[3] ^= l2(byteSub(mid)) // x[7]\r\n  }\r\n\r\n  // \u89E3\u5BC6\u65F6\u4F7F\u7528\u53CD\u5E8F\u7684\u8F6E\u5BC6\u94A5\r\n  if (cryptFlag === DECRYPT) {\r\n    for (let r = 0, mid; r < 16; r++) {\r\n      mid = roundKey[r]\r\n      roundKey[r] = roundKey[31 - r]\r\n      roundKey[31 - r] = mid\r\n    }\r\n  }\r\n}\r\n\r\nfunction sm4(inArray, key, cryptFlag, {\r\n  padding = 'pkcs#7', mode, iv = [], output = 'string'\r\n} = {}) {\r\n  if (mode === 'cbc') {\r\n    // CBC \u6A21\u5F0F\uFF0C\u9ED8\u8BA4\u8D70 ECB \u6A21\u5F0F\r\n    if (typeof iv === 'string') iv = hexToArray(iv)\r\n    if (iv.length !== (128 / 8)) {\r\n      // iv \u4E0D\u662F 128 \u6BD4\u7279\r\n      throw new Error('iv is invalid')\r\n    }\r\n  }\r\n\r\n  // \u68C0\u67E5 key\r\n  if (typeof key === 'string') key = hexToArray(key)\r\n  if (key.length !== (128 / 8)) {\r\n    // key \u4E0D\u662F 128 \u6BD4\u7279\r\n    throw new Error('key is invalid')\r\n  }\r\n\r\n  // \u68C0\u67E5\u8F93\u5165\r\n  if (typeof inArray === 'string') {\r\n    if (cryptFlag !== DECRYPT) {\r\n      // \u52A0\u5BC6\uFF0C\u8F93\u5165\u4E3A utf8 \u4E32\r\n      inArray = utf8ToArray(inArray)\r\n    } else {\r\n      // \u89E3\u5BC6\uFF0C\u8F93\u5165\u4E3A 16 \u8FDB\u5236\u4E32\r\n      inArray = hexToArray(inArray)\r\n    }\r\n  } else {\r\n    inArray = [...inArray]\r\n  }\r\n\r\n  // \u65B0\u589E\u586B\u5145\uFF0Csm4 \u662F 16 \u4E2A\u5B57\u8282\u4E00\u4E2A\u5206\u7EC4\uFF0C\u6240\u4EE5\u7EDF\u4E00\u8D70\u5230 pkcs#7\r\n  if ((padding === 'pkcs#5' || padding === 'pkcs#7') && cryptFlag !== DECRYPT) {\r\n    const paddingCount = BLOCK - inArray.length % BLOCK\r\n    for (let i = 0; i < paddingCount; i++) inArray.push(paddingCount)\r\n  }\r\n\r\n  // \u751F\u6210\u8F6E\u5BC6\u94A5\r\n  const roundKey = new Array(ROUND)\r\n  sms4KeyExt(key, roundKey, cryptFlag)\r\n\r\n  const outArray = []\r\n  let lastVector = iv\r\n  let restLen = inArray.length\r\n  let point = 0\r\n  while (restLen >= BLOCK) {\r\n    const input = inArray.slice(point, point + 16)\r\n    const output = new Array(16)\r\n\r\n    if (mode === 'cbc') {\r\n      for (let i = 0; i < BLOCK; i++) {\r\n        if (cryptFlag !== DECRYPT) {\r\n          // \u52A0\u5BC6\u8FC7\u7A0B\u5728\u7EC4\u52A0\u5BC6\u524D\u8FDB\u884C\u5F02\u6216\r\n          input[i] ^= lastVector[i]\r\n        }\r\n      }\r\n    }\r\n\r\n    sms4Crypt(input, output, roundKey)\r\n\r\n\r\n    for (let i = 0; i < BLOCK; i++) {\r\n      if (mode === 'cbc') {\r\n        if (cryptFlag === DECRYPT) {\r\n          // \u89E3\u5BC6\u8FC7\u7A0B\u5728\u7EC4\u89E3\u5BC6\u540E\u8FDB\u884C\u5F02\u6216\r\n          output[i] ^= lastVector[i]\r\n        }\r\n      }\r\n\r\n      outArray[point + i] = output[i]\r\n    }\r\n\r\n    if (mode === 'cbc') {\r\n      if (cryptFlag !== DECRYPT) {\r\n        // \u4F7F\u7528\u4E0A\u4E00\u6B21\u8F93\u51FA\u4F5C\u4E3A\u52A0\u5BC6\u5411\u91CF\r\n        lastVector = output\r\n      } else {\r\n        // \u4F7F\u7528\u4E0A\u4E00\u6B21\u8F93\u5165\u4F5C\u4E3A\u89E3\u5BC6\u5411\u91CF\r\n        lastVector = input\r\n      }\r\n    }\r\n\r\n    restLen -= BLOCK\r\n    point += BLOCK\r\n  }\r\n\r\n  // \u53BB\u9664\u586B\u5145\uFF0Csm4 \u662F 16 \u4E2A\u5B57\u8282\u4E00\u4E2A\u5206\u7EC4\uFF0C\u6240\u4EE5\u7EDF\u4E00\u8D70\u5230 pkcs#7\r\n  if ((padding === 'pkcs#5' || padding === 'pkcs#7') && cryptFlag === DECRYPT) {\r\n    const len = outArray.length\r\n    const paddingCount = outArray[len - 1]\r\n    for (let i = 1; i <= paddingCount; i++) {\r\n      if (outArray[len - i] !== paddingCount) throw new Error('padding is invalid')\r\n    }\r\n    outArray.splice(len - paddingCount, paddingCount)\r\n  }\r\n\r\n  // \u8C03\u6574\u8F93\u51FA\r\n  if (output !== 'array') {\r\n    if (cryptFlag !== DECRYPT) {\r\n      // \u52A0\u5BC6\uFF0C\u8F93\u51FA\u8F6C 16 \u8FDB\u5236\u4E32\r\n      return ArrayToHex(outArray)\r\n    } else {\r\n      // \u89E3\u5BC6\uFF0C\u8F93\u51FA\u8F6C utf8 \u4E32\r\n      return arrayToUtf8(outArray)\r\n    }\r\n  } else {\r\n    return outArray\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  encrypt(inArray, key, options) {\r\n    return sm4(inArray, key, 1, options)\r\n  },\r\n  decrypt(inArray, key, options) {\r\n    return sm4(inArray, key, 0, options)\r\n  }\r\n}\r\n", "module.exports = {\n  sm2: require('./sm2/index'),\n  sm3: require('./sm3/index'),\n  sm4: require('./sm4/index'),\n}\n", "export default require(\"./node_modules/sm-crypto/src/index.js\");"],
  "mappings": "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MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC1F;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAA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",
  "names": ["t", "z", "curve", "G", "n", "len", "require_sm3", "output"]
}
